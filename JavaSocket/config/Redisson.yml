---
# 集群配置
clusterServersConfig:

  # clientName（客户端名称）
  # 默认值：null
  # 在Redis节点里显示的客户端名称。
  clientName: "GS-173"

  # nodeAddresses（添加节点地址）
  # 可以通过host:port的格式来添加Redis集群节点的地址。多个节点可以一次性批量添加。
  # 只配置集群中的一个节点是可以的，在生产环境下最好全部配置
  nodeAddresses:
  - "redis://10.0.0.131:8001"
#  - "redis://10.0.0.131:8002"
#  - "redis://10.0.0.131:8003"
#  - "redis://10.0.0.131:8011"
#  - "redis://10.0.0.131:8012"
#  - "redis://10.0.0.131:8013"

  # password（密码）
  # 默认值：null
  # 用于节点身份验证的密码。
  password: "123"

  # Ping timeout used in <code>Node.ping</code> and <code>Node.pingAll<code> operation.
  # Value in milliseconds.
  pingTimeout: 1000
  # connectTimeout（连接超时，单位：毫秒）
  # 默认值：10000
  # 同任何节点建立连接时的等待超时。时间单位是毫秒。
  connectTimeout: 5000
  # timeout（命令等待超时，单位：毫秒）
  # 默认值：3000
  # 等待节点回复命令的时间。该时间从命令发送成功时开始计时。
  timeout: 2000
  # retryAttempts（命令失败重试次数）
  # 默认值：3
  # 如果尝试达到 retryAttempts（命令失败重试次数）仍然不能将命令发送至某个指定的节点时，将抛出错误。
  # 如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时）计时。
  retryAttempts: 3
  # retryInterval（命令重试发送时间间隔，单位：毫秒）
  # 默认值：1500
  # 在一条命令发送失败以后，等待重试发送的时间间隔。时间单位是毫秒。
  retryInterval: 1000
  # idleConnectionTimeout（连接空闲超时，单位：毫秒）
  # 默认值：10000
  # 如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。
  idleConnectionTimeout: 10000
  # Defines PING command sending interval per connection to Redis.
  # <code>0</code> means disable.
  # Default is <code>0</code>
  pingConnectionInterval: 30000
  # Enables TCP keepAlive for connection
  # Default is <code>false</code>
  keepAlive: true
  # Enables TCP noDelay for connection
  # Default is <code>false</code>
  tcpNoDelay: true
  # 集群扫描间隔时间
  # 默认值： 1000
  # 对Redis集群节点状态扫描的时间间隔。单位是毫秒
  scanInterval: 1000

  # loadBalancer（负载均衡算法类的选择）
  # 默认值： org.redisson.connection.balancer.RoundRobinLoadBalancer
  # 在多Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
  #  org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
  #  org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法
  #  org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
  loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}

  # readMode（读取操作的负载均衡模式）
  # 默认值：SLAVE（只在从服务节点里读取）
  # 注：在从服务节点里读取的数据说明已经至少有两个节点保存了该数据，确保了数据的高可用性。
  # 设置读取操作选择节点的模式可用值为：
  #  SLAVE - 只在从服务节点里读取。
  #  MASTER - 只在主服务节点里读取。
  #  MASTER_SLAVE - 在主从服务节点里都可以读取。
  readMode: "MASTER"

  # subscriptionMode（订阅操作的负载均衡模式）
  # 默认值：SLAVE（只在从服务节点里订阅）
  # 设置订阅操作选择节点的模式可用值为：
  #  SLAVE - 只在从服务节点里订阅。
  #  MASTER - 只在主服务节点里订阅。
  subscriptionMode: "MASTER"

  # masterConnectionMinimumIdleSize（主节点最小空闲连接数）
  # 默认值：32
  # 多节点的环境里，每个主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
  masterConnectionMinimumIdleSize: 16
  # masterConnectionPoolSize（主节点连接池大小）
  # 默认值：64
  # 多主节点的环境里，每个主节点的连接池最大容量。连接池的连接数量自动弹性伸缩。
  masterConnectionPoolSize: 64

  # subscriptionsPerConnection（单个连接最大订阅数量）
  # 默认值：5
  # 每个连接的最大订阅数量。
  subscriptionsPerConnection: 5
  # subscriptionConnectionMinimumIdleSize（从节点发布和订阅连接的最小空闲连接数）
  # 默认值：1
  # 多从节点的环境里，每个从服务节点里用于发布和订阅连接的最小保持连接数（长连接）。
  # Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
  subscriptionConnectionMinimumIdleSize: 1
  # subscriptionConnectionPoolSize（从节点发布和订阅连接池大小）
  # 默认值：50
  # 多从节点的环境里，每个从服务节点里用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  subscriptionConnectionPoolSize: 50

  # slaveConnectionMinimumIdleSize（从节点最小空闲连接数）
  # 默认值：32
  # 多从节点的环境里，每个从服务节点里用于普通操作（非发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
  slaveConnectionMinimumIdleSize: 4
  # slaveConnectionPoolSize（从节点连接池大小）
  # 默认值：64
  # 多从节点的环境里，每个从服务节点里用于普通操作（非发布和订阅）连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  slaveConnectionPoolSize: 32

  # Interval of Redis Slave reconnection attempt when
  # it was excluded from internal list of available servers.
  # On every such timeout event Redisson tries
  # to connect to disconnected Redis server.
  # Default is 3000
  failedSlaveReconnectionInterval: 3000
  # Redis Slave node failing to execute commands is excluded from the internal list of available nodes
  # when the time interval from the moment of first Redis command execution failure
  # on this server reaches <code>slaveFailsInterval</code> value.
  # Default is <code>180000</code>
  failedSlaveCheckInterval: 180000

  # dnsMonitoringInterval（DNS监控间隔，单位：毫秒）
  # 默认值：5000
  # 用来指定检查节点DNS变化的时间间隔。使用的时候应该确保JVM里的DNS数据的缓存时间保持在足够低的范围才有意义。用-1来禁用该功能。
  dnsMonitoringInterval: -1

  # sslEnableEndpointIdentification（启用SSL终端识别）
  # 默认值：true
  # 开启SSL终端识别能力。
  sslEnableEndpointIdentification: true
  # sslProvider（SSL实现方式）
  # 默认值：JDK
  # 确定采用哪种方式（JDK或OPENSSL）来实现SSL连接。
  sslProvider: "JDK"
  # sslTruststore（SSL信任证书库路径）
  # 默认值：null
  # 指定SSL信任证书库的路径。

  # sslTruststorePassword（SSL信任证书库密码）
  # 默认值：null
  # 指定SSL信任证书库的密码。

  # sslKeystore（SSL钥匙库路径）
  # 默认值：null
  # 指定SSL钥匙库的路径。

  # sslKeystorePassword（SSL钥匙库密码）
  # 默认值：null
  # 指定SSL钥匙库的密码。

# threads（线程池数量）
# 默认值: 当前处理核数量 * 2
# 这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
threads: 2
# nettyThreads （Netty线程池数量）
# 默认值: 当前处理核数量 * 2
# 这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
nettyThreads: 2
# transportMode（传输模式）
# 默认值：TransportMode.NIO
# 可选参数：
#  TransportMode.NIO,
#  TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux）
#  TransportMode.KQUEUE - 需要依赖里有netty-transport-native-kqueue包（macOS）
transportMode: "NIO"
# lockWatchdogTimeout（监控锁的看门狗超时，单位：毫秒）
# 默认值：30000
# 监控锁的看门狗超时时间单位为毫秒。
# 该参数只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。
# 如果该看门口未使用lockWatchdogTimeout去重新调整一个分布式锁的lockWatchdogTimeout超时，那么这个锁将变为失效状态。
# 这个参数可以用来避免由Redisson客户端节点宕机或其他原因造成死锁的情况。
lockWatchdogTimeout: 10000
# keepPubSubOrder（保持订阅发布顺序）
# 默认值：true
# 通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况。
keepPubSubOrder: true

# Config option for enabling Redisson Reference feature
# Default value is <code>true</code>
referenceEnabled: true
# Defines whether to decode data by <code>codec</code> in executor's threads or netty's threads.
# If decoding data process takes long time and netty thread is used then `RedisTimeoutException` could arise time to time.
# Default is <code>false</code>.
#decodeInExecutor: false
# Defines whether to use Lua-script cache on Redis side.
# Most Redisson methods are Lua-script based and this setting turned
# on could increase speed of such methods execution and save network traffic.
# NOTE: <code>readMode</code> option is not taken into account for such calls
# as Redis slave redirects execution of cached Lua-script on Redis master node.
# Default is <code>false</code>.
useScriptCache: false

# executor（线程池）
# 单独提供一个用来执行所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务的线程池（ExecutorService）实例。

# eventLoopGroup
# 用于特别指定一个EventLoopGroup. EventLoopGroup是用来处理所有通过Netty与Redis服务之间的连接发送和接受的消息。
# 每一个Redisson都会在默认情况下自己创建管理一个EventLoopGroup实例。因此，如果在同一个JVM里面可能存在多个Redisson实例的情况下，
# 采取这个配置实现多个Redisson实例共享一个EventLoopGroup的目的。
# 只有io.netty.channel.epoll.EpollEventLoopGroup或io.netty.channel.nio.NioEventLoopGroup才是允许的类型。

